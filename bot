from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
from telegram.ext import CallbackContext
from telegram import KeyboardButton, ReplyKeyboardMarkup


TOKEN = "6151381595:AAHSJcPw4-YY3jCiBF5NYYy-toOs8eeqXp8"

def start(update: Update, context):
    keyboard = [[InlineKeyboardButton("EN", callback_data='en'),
                 InlineKeyboardButton("RU", callback_data='ru')]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('Выберите язык / Choose a language:', reply_markup=reply_markup)

def language_callback(update: Update, context):
    query = update.callback_query
    lang = query.data

    # сохраняем выбранный язык в контексте пользователя
    context.user_data['lang'] = lang

    if lang == 'en':
        message = 'Welcome! Here are the available options:'
        keywords_button_text = 'Keywords'
        add_keywords_button_text = 'Add new keywords'
        delete_all_keywords_button_text = 'Delete all keywords'
        chats_button_text = 'Chats'
        add_chats_button_text = 'Add new chats'
        back_button_text = 'Back'
    else:
        message = 'Добро пожаловать! Вот доступные опции:'
        keywords_button_text = 'Ключевые слова'
        add_keywords_button_text = 'Добавить новые ключевые слова'
        delete_all_keywords_button_text = 'Удалить все ключевые слова'
        chats_button_text = 'Чаты'
        add_chats_button_text = 'Добавить новые чаты'
        back_button_text = 'Назад'

    keyboard = [[InlineKeyboardButton(keywords_button_text, callback_data='keywords'),
                 InlineKeyboardButton(chats_button_text, callback_data='chats')]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(message, reply_markup=reply_markup)

def keywords_callback(update: Update, context):
    lang = context.user_data.get('lang', 'en')

    if lang == 'en':
        message = 'Here are your keywords:'
        add_keywords_button_text = 'Add new keywords'
        delete_all_keywords_button_text = 'Delete all keywords'
        back_button_text = 'Back'
    else:
        message = 'Вот ваши ключевые слова:'
        add_keywords_button_text = 'Добавить новые ключевые слова'
        delete_all_keywords_button_text = 'Удалить все ключевые слова'
        back_button_text = 'Назад'

    keywords = context.user_data.get('keywords', [])

    if keywords:
        keywords_list = '\n'.join(keywords)
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(add_keywords_button_text, callback_data='add_keywords')],
                                              [InlineKeyboardButton(delete_all_keywords_button_text, callback_data='delete_all_keywords')],
                                              [InlineKeyboardButton(back_button_text, callback_data='back')]])
        update.callback_query.edit_message_text(f"{message}\n{keywords_list}", reply_markup=reply_markup)
    else:
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(add_keywords_button_text, callback_data='add_keywords')],
                                              [InlineKeyboardButton(back_button_text, callback_data='back')]])
        update.callback_query.edit_message_text(f"{message}\nВы еще не задали ни одного слова для поиска. Чтобы добавить их, нажмите кнопку «Добавить новые ключевые слова».", reply_markup=reply_markup)

def add_keywords_callback(update: Update, context):
    lang = context.user_data.get('lang', 'en')

    if lang == 'en':
        message = 'Please enter the keywords or phrases you want to search for, separated by a comma:'
        back_button_text = 'Back'
    else:
        message = 'Пожалуйста, введите ключевые слова или фразы, которые вы хотите найти, разделенные запятыми:'
        back_button_text = 'Назад'

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(back_button_text, callback_data='back')]])
    update.callback_query.edit_message_text(message, reply_markup=reply_markup)

    return 'add_keywords'

def handle_keywords(update: Update, context):
    lang = context.user_data.get('lang', 'en')

    if lang == 'en':
        message = 'Keywords added:'
        back_button_text = 'Back'
    else:
        message = 'Добавлены ключевые слова:'
        back_button_text = 'Назад'

    keywords = update.message.text.split(',')

    # очищаем список ключевых слов и добавляем новые
    context.user_data['keywords'] = [keyword.strip() for keyword in keywords]

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(back_button_text, callback_data='back')]])
    update.message.reply_text(f"{message} {keywords}", reply_markup=reply_markup)

    return -1

def delete_all_keywords_callback(update: Update, context):
    lang = context.user_data.get('lang', 'en')

    if lang == 'en':
        message = 'Are you sure you want to delete all keywords?'
        yes_button_text = 'Yes'
        no_button_text = 'No'
        back_button_text = 'Back'
    else:
        message = 'Вы уверены, что хотите удалить все ключевые слова?'
        yes_button_text = 'Да'
        no_button_text = 'Нет'
        back_button_text = 'Назад'

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(yes_button_text, callback_data='delete_all_keywords_yes'),
                                           InlineKeyboardButton(no_button_text, callback_data='delete_all_keywords_no')], 
                                          [InlineKeyboardButton(back_button_text, callback_data='back')]])
    update.callback_query.edit_message_text(message, reply_markup=reply_markup)

def delete_all_keywords_yes_callback(update: Update, context):
    lang = context.user_data.get('lang', 'en')

    if lang == 'en':
        message = 'All keywords have been deleted.'
        back_button_text = 'Back'
    else:
        message = 'Все ключевые слова были удалены.'
        back_button_text = 'Назад'

    context.user_data['keywords'] = []

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(back_button_text, callback_data='back')]])
    update.callback_query.edit_message_text(message, reply_markup=reply_markup)

def chats_callback(update: Update, context):
    lang = context.user_data.get('lang', 'en')

    if lang == 'en':
        message = 'Here are your chats:'
        add_chats_button_text = 'Add new chats'
        back_button_text = 'Back'
    else:
        message = 'Вот ваши чаты:'
        add_chats_button_text = 'Добавить новые чаты'
        back_button_text = 'Назад'

    chats = context.user_data.get('chats', [])

    if chats:
        chats_list = '\n'.join(chats)
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(add_chats_button_text, callback_data='add_chats')],
                                              [InlineKeyboardButton(back_button_text, callback_data='back')]])
        update.callback_query.edit_message_text(f"{message}\n{chats_list}", reply_markup=reply_markup)
    else:
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(add_chats_button_text, callback_data='add_chats')],
                                              [InlineKeyboardButton(back_button_text, callback_data='back')]])
        update.callback_query.edit_message_text(f"{message}\nУ вас нет добавленных чатов.", reply_markup=reply_markup)

def add_chats_callback(update: Update, context):
    lang = context.user_data.get('lang', 'en')

    if lang == 'en':
        message = 'Please enter the name of the chats you want to add, separated by a comma:'
        back_button_text = 'Back'
    else:
        message = 'Пожалуйста, введите название чатов, которые вы хотите добавить, разделенные запятыми:'
        back_button_text = 'Назад'

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(back_button_text, callback_data='back')]])
    update.callback_query.edit_message_text(message, reply_markup=reply_markup)

    return 'add_chats'

def handle_chats(update: Update, context):
    lang = context.user_data.get('lang', 'en')

    if lang == 'en':
        message = 'Chats added:'
        back_button_text = 'Back'
    else:
        message = 'Добавлены чаты:'
        back_button_text = 'Назад'

    chats = update.message.text.split(',')

    # очищаем список чатов и добавляем новые
    context.user_data['chats'] = [chat.strip() for chat in chats]
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(back_button_text, callback_data='back')]])
    update.message.reply_text(f"{message} {chats}", reply_markup=reply_markup)

    return -1

    
def notify_user(context, lead):
    lang = context.user_data.get('lang', 'en')
    chats = context.user_data.get('chats', [])

    if lang == 'en':
        message = f"You have a new lead:\n{lead}"
    else:
        message = f"У вас новый лид:\n{lead}"

    for chat_id in chats:
        try:
            context.bot.send_message(chat_id=chat_id, text=message, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('Reply', url='https://telegram.me/' + context.bot.username)]]))
        except Exception as e:
            print(f"Error while sending message to chat {chat_id}: {str(e)}")

def handle_message(update: Update, context: CallbackContext):
    state = context.user_data.get('state', -1)

    # обработка команды /start
    if update.message.text == '/start':
        lang_keyboard = [[KeyboardButton('🇺🇸 English'), KeyboardButton('🇷🇺 Русский')]]
        update.message.reply_text("Please choose a language / Пожалуйста, выберите язык:", reply_markup=ReplyKeyboardMarkup(lang_keyboard, one_time_keyboard=True))
        return 'choose_language'

    # обработка команды /help
    if update.message.text == '/help':
        lang = context.user_data.get('lang', 'en')

        if lang == 'en':
            message = "This bot allows you to find leads in your Telegram chats.\n\n"
            message += "You can add keywords to search for, and then add chats where the bot should search for these keywords.\n\n"
            message += "You can also delete all keywords and view or add new chats.\n\n"
            message += "To get started, click on the 'Keywords' or 'Chats' buttons in the main menu."
        else:
            message = "Этот бот позволяет находить лидов в ваших чатах Telegram.\n\n"
            message += "Вы можете добавлять ключевые слова для поиска и затем добавлять чаты, в которых бот должен искать эти ключевые слова.\n\n"
            message += "Вы также можете удалить все ключевые слова и просмотреть или добавить новые чаты.\n\n"
            message += "Чтобы начать, нажмите кнопки 'Ключевые слова' или 'Чаты' в главном меню."

        update.message.reply_text(message)
        return -1

    # обработка текстовых сообщений
    if state == 'add_keywords':
        return handle_keywords(update, context)
    elif state == 'add_chats':
        return handle_chats(update, context)

    # обработка нажатий на кнопки
    if update.callback_query:
        callback_data = update.callback_query.data

        if callback_data == 'back':
            return back_callback(update, context)
        elif callback_data == 'keywords':
            return keywords_callback(update, context)
        elif callback_data == 'add_keywords':
            return add_keywords_callback(update, context)
        elif callback_data == 'delete_all_keywords':
            return delete_all_keywords_callback(update, context)
        elif callback_data == 'delete_all_keywords_yes':
            return delete_all_keywords_yes_callback(update, context)
        elif callback_data == 'chats':
            return chats_callback(update, context)
        elif callback_data == 'add_chats':
            return add_chats_callback(update, context)

    # если никакое условие не выполнилось, то возвращаем текущее состояние пользователя
    return state
def main():
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # обработка сообщений и нажатий на кнопки
    dispatcher.add_handler(CommandHandler('start', handle_message))
    dispatcher.add_handler(CommandHandler('help', handle_message))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dispatcher.add_handler(CallbackQueryHandler(handle_message))

    # запуск бота
    updater.start_polling()
    updater.idle()


